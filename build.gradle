plugins {
	id 'java'
}

repositories {
	mavenLocal()
	maven {
		url = 'https://repo.runelite.net'
	}
	mavenCentral()

	// Repository needed for MaryTTS
	jcenter()
}

def runeLiteVersion = '1.8.1'

dependencies {
	compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'

	// Dependencies needed for Google Cloud
	implementation platform('com.google.cloud:libraries-bom:23.1.0')
	implementation 'com.google.cloud:google-cloud-texttospeech'

	// MaryTTS local jars
	implementation files('lib/voice-cmu-bdl-hsmm-5.2.jar')
	implementation files('lib/voice-cmu-rms-hsmm-5.2.jar')
	implementation files('lib/voice-dfki-obadiah-5.2.jar')
	implementation files('lib/voice-dfki-poppy-5.2.jar')
	implementation files('lib/voice-dfki-prudence-hsmm-5.2.jar')

	// https://mvnrepository.com/artifact/javazoom/jlayer
	implementation group: 'javazoom', name: 'jlayer', version: '1.0.1'

	// Dependencies needed for MaryTTS
	compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
	compile(group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.2') {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
//	compile(group: 'de.dfki.mary', name: 'voice-cmu-awb-time', version: '5.2.1') {
//		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
//	}

	testImplementation 'junit:junit:4.12'
	testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
	testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
}

configurations.all {
	exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

group = 'com.example'
version = '1.0-SNAPSHOT'
sourceCompatibility = "11"

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

project.afterEvaluate {
	tasks.create("depsize") {
		listConfigurationDependencies(configurations.default)
	}

	tasks.create("depsize-all-configurations") {
		configurations.each {
			if (it.isCanBeResolved()) {
				listConfigurationDependencies(it)
			}
		}
	}

}

def listConfigurationDependencies(Configuration configuration) {
	def formatStr = "%,10.2f"

	def size = configuration.collect { it.length() / (1024 * 1024) }.sum()

	def out = new StringBuffer()
	out << "\nConfiguration name: \"${configuration.name}\"\n"
	if (size) {
		out << 'Total dependencies size:'.padRight(65)
		out << "${String.format(formatStr, size)} Mb\n\n"

		configuration.sort { -it.length() }
				.each {
					out << "${it.name}".padRight(65)
					out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
				}
	} else {
		out << 'No dependencies found';
	}
	println(out)
}

targetCompatibility = JavaVersion.VERSION_11
